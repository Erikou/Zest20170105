# you can read more about security in the related section of the documentation
# http://symfony.com/doc/current/book/security.html
security:
    # http://symfony.com/doc/current/book/security.html#encoding-the-user-s-password
    encoders:
        Symfony\Component\Security\Core\User\User:
            algorithm: bcrypt
            cost: 12
        SE\InputBundle\Entity\User: 
            algorithm: bcrypt
            cost: 12

    # http://symfony.com/doc/current/book/security.html#hierarchical-roles
    role_hierarchy:
        ROLE_INPUT_READ:      [ROLE_USER]
        ROLE_INPUT_EDIT:      [ROLE_INPUT_READ]
        ROLE_REPORT_READ:     [ROLE_USER]
        ROLE_REPORT_EDIT:     [ROLE_REPORT_READ]
        ROLE_PERFORMANCE_READ: [ROLE_USER]
        ROLE_TRANSFER_READ:   [ROLE_USER]
        ROLE_TRANSFER_EDIT:   [ROLE_TRANSFER_READ]
        ROLE_ADMIN:           [ROLE_USER, ROLE_INPUT_EDIT, ROLE_REPORT_EDIT, ROLE_CAN_CHANGE_CREDENTIALS, ROLE_PERFORMANCE_READ, ROLE_TRANSFER_EDIT]

    # http://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers
    providers:
        db_provider:
            entity:
                class: SE\InputBundle\Entity\User
                property: username
        #in_memory:
        #    memory:
        #        users:
        #            user:  { password: userpass, roles: [ 'ROLE_USER' ] }
        #            admin: { password: adminpass, roles: [ 'ROLE_ADMIN' ] }


    firewalls:
        #dev: # disables authentication for assets and the profiler, adapt it according to your needs
        #    security: false
        login_assets:
            pattern: ^/*.(css|images|js)
            security: false
        
        login_firewall:
            pattern:   ^/login$
            anonymous: true

        secured_area:
            pattern:    ^/
            form_login:
                login_path: login
                check_path: login_check
                default_target_path: se_input_home
                username_parameter: _username
                password_parameter: _password
                provider: db_provider
            logout:
                path:       logout
                target:     login
            anonymous: false
            #http_basic: ~

    # restrict or allow access for different parts of the application based on roles (aka permissions)
    access_control:
        - { path: ^/login,        roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login_check,  roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin,        roles: ROLE_ADMIN }
        - { path: ^/review,       roles: ROLE_INPUT_READ }
        - { path: ^/edit,         roles: ROLE_INPUT_EDIT }
        - { path: ^/review/edit,  roles: ROLE_INPUT_EDIT }
        - { path: ^/report,       roles: ROLE_REPORT_READ }
        - { path: ^/account,      roles: ROLE_USER }
        - { path: ^/,             roles: ROLE_USER }
        